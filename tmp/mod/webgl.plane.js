{"intl":"var _=function(){var D={\"en\":{},\"fr\":{}},X=require(\"$\").intl;function _(){return X(D,arguments);}_.all=D;return _}();\n","src":"/** @module webgl.plane */require( 'webgl.plane', function(require, module, exports) { var _=function(){var D={\"en\":{},\"fr\":{}},X=require(\"$\").intl;function _(){return X(D,arguments);}_.all=D;return _}();\n    \"use strict\";\n\n\n/**\n * @example\n * var Plane = require(\"webgl.plane\");\n * var instance = new Plane();\n * @class Plane\n */\nvar Plane = function ( args ) {\n  if ( typeof args === 'undefined' ) args = {};\n  if ( typeof args.canvasId === 'undefined' ) args.canvasId = \"glcanvas\";\n  if ( typeof args.fragmentShaderId === 'undefined' ) args.fragmentShaderId = \"fragment-shader\";\n  if ( typeof args.uniform === 'undefined' ) args.uniform = {};\n  if ( typeof args.texture === 'undefined' ) args.texture = {};\n  if ( typeof args.resolution === 'undefined' ) args.resolution = 2;\n\n  this._args = args;\n\n  var canvasId = args.canvasId;\n  var canvas = document.getElementById( canvasId );\n  if ( !canvas ) {\n    throw Error( \"Canvas not found with this id: \" + canvasId );\n  }\n  var fragmentShaderId = args.fragmentShaderId;\n  var fragmentShaderElement = document.getElementById( fragmentShaderId );\n  if ( !fragmentShaderElement ) {\n    throw Error( \"Fragment shader not found with this id: \" + canvasId );\n  }\n  var fragmentShader = fragmentShaderElement.textContent.trim();\n  var rect = canvas.getBoundingClientRect();\n  var W = rect.width;\n  var H = rect.height;\n  canvas.setAttribute( \"width\", W / args.resolution );\n  canvas.setAttribute( \"height\", H / args.resolution );\n  var gl = canvas.getContext( \"webgl\" ) || canvas.getContext( \"experimental-webgl\" );\n\n  initShaders.call( this, gl, fragmentShader );\n  this._squareVerticesBuffer = initBuffers( gl, W / args.resolution, H / args.resolution );\n\n  var key, val, texture, textureIndex = 0;\n  for ( key in args.texture ) {\n    val = args.texture[ key ];\n    if ( typeof val.data === 'undefined' ) {\n      throw Error( \"Missing texture attribute \\\"data\\\" for \\\"\" + key + \"\\\"!\" );\n    }\n    if ( typeof val.width === 'undefined' ) {\n      throw Error( \"Missing texture attribute \\\"width\\\" for \\\"\" + key + \"\\\"!\" );\n    }\n\n    if ( !Array.isArray( val.data ) ) {\n      throw Error( \"Textures must be arrays of Uint8! It is not the case of \\\"\" + key + \"\\\"!\" );\n    }\n    // Make sur data is an array of UNSIGNED_BYTE.\n    val.data = new Uint8Array( val.data );\n    var tex = gl.createTexture();\n    gl.bindTexture( gl.TEXTURE_2D, tex );\n    var width = val.width;\n    var height = Math.floor( ( val.data.length >> 2 ) / width );\n    gl.texImage2D(\n      gl.TEXTURE_2D, // target\n      0, // level\n      gl.RGBA, // internal format\n      width, height, // width, height\n      0, // border\n      gl.RGBA, // format\n      gl.UNSIGNED_BYTE, // type\n      val.data // data\n    );\n    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR );\n    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST );\n    gl.generateMipmap( gl.TEXTURE_2D );\n    var location = gl.getUniformLocation( this._shaderProgram, key );\n    gl.activeTexture( gl.TEXTURE0 + textureIndex );\n    gl.bindTexture( gl.TEXTURE_2D, tex );\n    gl.uniform1i( location, textureIndex );\n    textureIndex++;\n  }\n\n  this._gl = gl;\n  this._started = false;\n};\n\n\n/**\n * @return void\n */\nPlane.prototype.start = function () {\n  var that = this;\n  var gl = this._gl;\n  var uniform = this._args.uniform;\n  this._started = true;\n\n  var time0 = 0;\n  var nbFrames = 20;\n  var fps = document.getElementById( \"fps\" );\n\n  function render( time ) {\n    // Computing the FPS (Frames Per Second).\n    if ( time0 === 0 ) {\n      time0 = time;\n      nbFrames = 20;\n    } else {\n      nbFrames--;\n      if ( nbFrames <= 0 ) {\n        fps.textContent = Math.floor( 0.5 + 20000 / ( time - time0 ) ) + \" fps\";\n        time0 = time;\n        nbFrames = 20;\n      }\n    }\n\n    //gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.bindBuffer( gl.ARRAY_BUFFER, that._squareVerticesBuffer );\n    gl.vertexAttribPointer( that._vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0 );\n\n    var f = that._args.render;\n    if ( typeof f === 'function' ) {\n      f( time, uniform );\n    }\n\n    var key, val;\n    for ( key in uniform ) {\n      val = uniform[ key ];\n      gl.uniform1f( gl.getUniformLocation( that._shaderProgram, key ), val );\n    }\n    // Draw the square.\n    gl.drawArrays( gl.TRIANGLE_STRIP, 0, 4 );\n    if ( that._started ) {\n      window.requestAnimationFrame( render );\n    }\n  }\n\n  window.requestAnimationFrame( render );\n};\n\n\nfunction initShaders( gl, code ) {\n  //  var fragmentShader = getShader(gl, code);\n  var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n  gl.shaderSource( fragmentShader, code );\n  gl.compileShader( fragmentShader );\n  if ( !gl.getShaderParameter( fragmentShader, gl.COMPILE_STATUS ) ) {\n    throw Error(\n      \"An error occurred compiling the fragment shaders:\\n\" +\n      gl.getShaderInfoLog( fragmentShader ) );\n  }\n\n  var vertexShader = gl.createShader( gl.VERTEX_SHADER );\n  gl.shaderSource( vertexShader,\n    \"attribute vec3 aVertexPosition;\\nvarying lowp vec3 vPoint;\\nvoid main(void) {\\n  float x = aVertexPosition[0];\\n  float y = aVertexPosition[1];\\n  if (x > 0.0) {\\n    if (y > 0.0) {\\n      gl_Position = vec4(1.0, 1.0, 0.0, 1.0);\\n    } else {\\n      gl_Position = vec4(1.0, -1.0, 0.0, 1.0);\\n    }\\n  } else {\\n    if (y > 0.0) {\\n      gl_Position = vec4(-1.0, 1.0, 0.0, 1.0);\\n    } else {\\n      gl_Position = vec4(-1.0, -1.0, 0.0, 1.0);\\n    }\\n  }\\n  vPoint = aVertexPosition;\\n}\\n\"\n  );\n  gl.compileShader( vertexShader );\n  if ( !gl.getShaderParameter( vertexShader, gl.COMPILE_STATUS ) ) {\n    throw Error(\n      \"An error occurred compiling the vertex shaders:\\n\" +\n      gl.getShaderInfoLog( vertexShader ) );\n  }\n\n  var shaderProgram = gl.createProgram();\n  gl.attachShader( shaderProgram, vertexShader );\n  gl.attachShader( shaderProgram, fragmentShader );\n  gl.linkProgram( shaderProgram );\n\n  if ( !gl.getProgramParameter( shaderProgram, gl.LINK_STATUS ) ) {\n    throw Error( \"Unable to initialize the shader program.\" );\n  }\n\n  gl.useProgram( shaderProgram );\n\n  var vertexPositionAttribute = gl.getAttribLocation( shaderProgram, \"aVertexPosition\" );\n  gl.enableVertexAttribArray( vertexPositionAttribute );\n\n  this._shaderProgram = shaderProgram;\n  this._vertexPositionAttribute = vertexPositionAttribute;\n}\n\nfunction initBuffers( gl, W, H ) {\n  var squareVerticesBuffer = gl.createBuffer();\n  gl.bindBuffer( gl.ARRAY_BUFFER, squareVerticesBuffer );\n  var vertices = [\n        W / 2, -H / 2, 0.0,\n            -W / 2, -H / 2, 0.0,\n        W / 2, H / 2, 0.0,\n            -W / 2, H / 2, 0.0\n    ];\n  gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( vertices ), gl.STATIC_DRAW );\n  return squareVerticesBuffer;\n}\n\nmodule.exports = Plane;\n\n  \nmodule.exports._ = _;\n/**\n * @module webgl.plane\n * @see module:$\n\n */\n});","zip":"require(\"webgl.plane\",function(t,r,e){function a(t,r){var e=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(e,r),t.compileShader(e),!t.getShaderParameter(e,t.COMPILE_STATUS))throw Error(\"An error occurred compiling the fragment shaders:\\n\"+t.getShaderInfoLog(e));var a=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(a,\"attribute vec3 aVertexPosition;\\nvarying lowp vec3 vPoint;\\nvoid main(void) {\\n  float x = aVertexPosition[0];\\n  float y = aVertexPosition[1];\\n  if (x > 0.0) {\\n    if (y > 0.0) {\\n      gl_Position = vec4(1.0, 1.0, 0.0, 1.0);\\n    } else {\\n      gl_Position = vec4(1.0, -1.0, 0.0, 1.0);\\n    }\\n  } else {\\n    if (y > 0.0) {\\n      gl_Position = vec4(-1.0, 1.0, 0.0, 1.0);\\n    } else {\\n      gl_Position = vec4(-1.0, -1.0, 0.0, 1.0);\\n    }\\n  }\\n  vPoint = aVertexPosition;\\n}\\n\"),t.compileShader(a),!t.getShaderParameter(a,t.COMPILE_STATUS))throw Error(\"An error occurred compiling the vertex shaders:\\n\"+t.getShaderInfoLog(a));var i=t.createProgram();if(t.attachShader(i,a),t.attachShader(i,e),t.linkProgram(i),!t.getProgramParameter(i,t.LINK_STATUS))throw Error(\"Unable to initialize the shader program.\");t.useProgram(i);var o=t.getAttribLocation(i,\"aVertexPosition\");t.enableVertexAttribArray(o),this._shaderProgram=i,this._vertexPositionAttribute=o}function i(t,r,e){var a=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,a);var i=[r/2,-e/2,0,-r/2,-e/2,0,r/2,e/2,0,-r/2,e/2,0];return t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.STATIC_DRAW),a}var o=function(){function r(){return a(e,arguments)}var e={en:{},fr:{}},a=t(\"$\").intl;return r.all=e,r}(),n=function(t){void 0===t&&(t={}),void 0===t.canvasId&&(t.canvasId=\"glcanvas\"),void 0===t.fragmentShaderId&&(t.fragmentShaderId=\"fragment-shader\"),void 0===t.uniform&&(t.uniform={}),void 0===t.texture&&(t.texture={}),void 0===t.resolution&&(t.resolution=2),this._args=t;var r=t.canvasId,e=document.getElementById(r);if(!e)throw Error(\"Canvas not found with this id: \"+r);var o=t.fragmentShaderId,n=document.getElementById(o);if(!n)throw Error(\"Fragment shader not found with this id: \"+r);var s=n.textContent.trim(),d=e.getBoundingClientRect(),h=d.width,u=d.height;e.setAttribute(\"width\",h/t.resolution),e.setAttribute(\"height\",u/t.resolution);var f=e.getContext(\"webgl\")||e.getContext(\"experimental-webgl\");a.call(this,f,s),this._squareVerticesBuffer=i(f,h/t.resolution,u/t.resolution);var g,v,c=0;for(g in t.texture){if(v=t.texture[g],void 0===v.data)throw Error('Missing texture attribute \"data\" for \"'+g+'\"!');if(void 0===v.width)throw Error('Missing texture attribute \"width\" for \"'+g+'\"!');if(!Array.isArray(v.data))throw Error('Textures must be arrays of Uint8! It is not the case of \"'+g+'\"!');v.data=new Uint8Array(v.data);var E=f.createTexture();f.bindTexture(f.TEXTURE_2D,E);var m=v.width,l=Math.floor((v.data.length>>2)/m);f.texImage2D(f.TEXTURE_2D,0,f.RGBA,m,l,0,f.RGBA,f.UNSIGNED_BYTE,v.data),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MAG_FILTER,f.LINEAR),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MIN_FILTER,f.LINEAR_MIPMAP_NEAREST),f.generateMipmap(f.TEXTURE_2D);var _=f.getUniformLocation(this._shaderProgram,g);f.activeTexture(f.TEXTURE0+c),f.bindTexture(f.TEXTURE_2D,E),f.uniform1i(_,c),c++}this._gl=f,this._started=!1};n.prototype.start=function(){function t(s){0===i?(i=s,o=20):--o<=0&&(n.textContent=Math.floor(.5+2e4/(s-i))+\" fps\",i=s,o=20),e.bindBuffer(e.ARRAY_BUFFER,r._squareVerticesBuffer),e.vertexAttribPointer(r._vertexPositionAttribute,3,e.FLOAT,!1,0,0);var d=r._args.render;\"function\"==typeof d&&d(s,a);var h,u;for(h in a)u=a[h],e.uniform1f(e.getUniformLocation(r._shaderProgram,h),u);e.drawArrays(e.TRIANGLE_STRIP,0,4),r._started&&window.requestAnimationFrame(t)}var r=this,e=this._gl,a=this._args.uniform;this._started=!0;var i=0,o=20,n=document.getElementById(\"fps\");window.requestAnimationFrame(t)},r.exports=n,r.exports._=o});\n//# sourceMappingURL=webgl.plane.js.map","map":{"version":3,"file":"webgl.plane.js","sources":["webgl.plane.js"],"sourcesContent":["/** @module webgl.plane */require( 'webgl.plane', function(require, module, exports) { var _=function(){var D={\"en\":{},\"fr\":{}},X=require(\"$\").intl;function _(){return X(D,arguments);}_.all=D;return _}();\n    \"use strict\";\n\n\n/**\n * @example\n * var Plane = require(\"webgl.plane\");\n * var instance = new Plane();\n * @class Plane\n */\nvar Plane = function ( args ) {\n  if ( typeof args === 'undefined' ) args = {};\n  if ( typeof args.canvasId === 'undefined' ) args.canvasId = \"glcanvas\";\n  if ( typeof args.fragmentShaderId === 'undefined' ) args.fragmentShaderId = \"fragment-shader\";\n  if ( typeof args.uniform === 'undefined' ) args.uniform = {};\n  if ( typeof args.texture === 'undefined' ) args.texture = {};\n  if ( typeof args.resolution === 'undefined' ) args.resolution = 2;\n\n  this._args = args;\n\n  var canvasId = args.canvasId;\n  var canvas = document.getElementById( canvasId );\n  if ( !canvas ) {\n    throw Error( \"Canvas not found with this id: \" + canvasId );\n  }\n  var fragmentShaderId = args.fragmentShaderId;\n  var fragmentShaderElement = document.getElementById( fragmentShaderId );\n  if ( !fragmentShaderElement ) {\n    throw Error( \"Fragment shader not found with this id: \" + canvasId );\n  }\n  var fragmentShader = fragmentShaderElement.textContent.trim();\n  var rect = canvas.getBoundingClientRect();\n  var W = rect.width;\n  var H = rect.height;\n  canvas.setAttribute( \"width\", W / args.resolution );\n  canvas.setAttribute( \"height\", H / args.resolution );\n  var gl = canvas.getContext( \"webgl\" ) || canvas.getContext( \"experimental-webgl\" );\n\n  initShaders.call( this, gl, fragmentShader );\n  this._squareVerticesBuffer = initBuffers( gl, W / args.resolution, H / args.resolution );\n\n  var key, val, texture, textureIndex = 0;\n  for ( key in args.texture ) {\n    val = args.texture[ key ];\n    if ( typeof val.data === 'undefined' ) {\n      throw Error( \"Missing texture attribute \\\"data\\\" for \\\"\" + key + \"\\\"!\" );\n    }\n    if ( typeof val.width === 'undefined' ) {\n      throw Error( \"Missing texture attribute \\\"width\\\" for \\\"\" + key + \"\\\"!\" );\n    }\n\n    if ( !Array.isArray( val.data ) ) {\n      throw Error( \"Textures must be arrays of Uint8! It is not the case of \\\"\" + key + \"\\\"!\" );\n    }\n    // Make sur data is an array of UNSIGNED_BYTE.\n    val.data = new Uint8Array( val.data );\n    var tex = gl.createTexture();\n    gl.bindTexture( gl.TEXTURE_2D, tex );\n    var width = val.width;\n    var height = Math.floor( ( val.data.length >> 2 ) / width );\n    gl.texImage2D(\n      gl.TEXTURE_2D, // target\n      0, // level\n      gl.RGBA, // internal format\n      width, height, // width, height\n      0, // border\n      gl.RGBA, // format\n      gl.UNSIGNED_BYTE, // type\n      val.data // data\n    );\n    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR );\n    gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST );\n    gl.generateMipmap( gl.TEXTURE_2D );\n    var location = gl.getUniformLocation( this._shaderProgram, key );\n    gl.activeTexture( gl.TEXTURE0 + textureIndex );\n    gl.bindTexture( gl.TEXTURE_2D, tex );\n    gl.uniform1i( location, textureIndex );\n    textureIndex++;\n  }\n\n  this._gl = gl;\n  this._started = false;\n};\n\n\n/**\n * @return void\n */\nPlane.prototype.start = function () {\n  var that = this;\n  var gl = this._gl;\n  var uniform = this._args.uniform;\n  this._started = true;\n\n  var time0 = 0;\n  var nbFrames = 20;\n  var fps = document.getElementById( \"fps\" );\n\n  function render( time ) {\n    // Computing the FPS (Frames Per Second).\n    if ( time0 === 0 ) {\n      time0 = time;\n      nbFrames = 20;\n    } else {\n      nbFrames--;\n      if ( nbFrames <= 0 ) {\n        fps.textContent = Math.floor( 0.5 + 20000 / ( time - time0 ) ) + \" fps\";\n        time0 = time;\n        nbFrames = 20;\n      }\n    }\n\n    //gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.bindBuffer( gl.ARRAY_BUFFER, that._squareVerticesBuffer );\n    gl.vertexAttribPointer( that._vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0 );\n\n    var f = that._args.render;\n    if ( typeof f === 'function' ) {\n      f( time, uniform );\n    }\n\n    var key, val;\n    for ( key in uniform ) {\n      val = uniform[ key ];\n      gl.uniform1f( gl.getUniformLocation( that._shaderProgram, key ), val );\n    }\n    // Draw the square.\n    gl.drawArrays( gl.TRIANGLE_STRIP, 0, 4 );\n    if ( that._started ) {\n      window.requestAnimationFrame( render );\n    }\n  }\n\n  window.requestAnimationFrame( render );\n};\n\n\nfunction initShaders( gl, code ) {\n  //  var fragmentShader = getShader(gl, code);\n  var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n  gl.shaderSource( fragmentShader, code );\n  gl.compileShader( fragmentShader );\n  if ( !gl.getShaderParameter( fragmentShader, gl.COMPILE_STATUS ) ) {\n    throw Error(\n      \"An error occurred compiling the fragment shaders:\\n\" +\n      gl.getShaderInfoLog( fragmentShader ) );\n  }\n\n  var vertexShader = gl.createShader( gl.VERTEX_SHADER );\n  gl.shaderSource( vertexShader,\n    \"attribute vec3 aVertexPosition;\\nvarying lowp vec3 vPoint;\\nvoid main(void) {\\n  float x = aVertexPosition[0];\\n  float y = aVertexPosition[1];\\n  if (x > 0.0) {\\n    if (y > 0.0) {\\n      gl_Position = vec4(1.0, 1.0, 0.0, 1.0);\\n    } else {\\n      gl_Position = vec4(1.0, -1.0, 0.0, 1.0);\\n    }\\n  } else {\\n    if (y > 0.0) {\\n      gl_Position = vec4(-1.0, 1.0, 0.0, 1.0);\\n    } else {\\n      gl_Position = vec4(-1.0, -1.0, 0.0, 1.0);\\n    }\\n  }\\n  vPoint = aVertexPosition;\\n}\\n\"\n  );\n  gl.compileShader( vertexShader );\n  if ( !gl.getShaderParameter( vertexShader, gl.COMPILE_STATUS ) ) {\n    throw Error(\n      \"An error occurred compiling the vertex shaders:\\n\" +\n      gl.getShaderInfoLog( vertexShader ) );\n  }\n\n  var shaderProgram = gl.createProgram();\n  gl.attachShader( shaderProgram, vertexShader );\n  gl.attachShader( shaderProgram, fragmentShader );\n  gl.linkProgram( shaderProgram );\n\n  if ( !gl.getProgramParameter( shaderProgram, gl.LINK_STATUS ) ) {\n    throw Error( \"Unable to initialize the shader program.\" );\n  }\n\n  gl.useProgram( shaderProgram );\n\n  var vertexPositionAttribute = gl.getAttribLocation( shaderProgram, \"aVertexPosition\" );\n  gl.enableVertexAttribArray( vertexPositionAttribute );\n\n  this._shaderProgram = shaderProgram;\n  this._vertexPositionAttribute = vertexPositionAttribute;\n}\n\nfunction initBuffers( gl, W, H ) {\n  var squareVerticesBuffer = gl.createBuffer();\n  gl.bindBuffer( gl.ARRAY_BUFFER, squareVerticesBuffer );\n  var vertices = [\n        W / 2, -H / 2, 0.0,\n            -W / 2, -H / 2, 0.0,\n        W / 2, H / 2, 0.0,\n            -W / 2, H / 2, 0.0\n    ];\n  gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( vertices ), gl.STATIC_DRAW );\n  return squareVerticesBuffer;\n}\n\nmodule.exports = Plane;\n\n  \nmodule.exports._ = _;\n});"],"names":["require","module","exports","initShaders","gl","code","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","vertexShader","VERTEX_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vertexPositionAttribute","getAttribLocation","enableVertexAttribArray","this","_shaderProgram","_vertexPositionAttribute","initBuffers","W","H","squareVerticesBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","vertices","bufferData","Float32Array","STATIC_DRAW","_","X","D","arguments","en","fr","intl","all","Plane","args","canvasId","fragmentShaderId","uniform","texture","resolution","_args","canvas","document","getElementById","fragmentShaderElement","textContent","trim","rect","getBoundingClientRect","width","height","setAttribute","getContext","call","_squareVerticesBuffer","key","val","textureIndex","data","Array","isArray","Uint8Array","tex","createTexture","bindTexture","TEXTURE_2D","Math","floor","length","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","location","getUniformLocation","activeTexture","TEXTURE0","uniform1i","_gl","_started","prototype","start","render","time","time0","nbFrames","fps","that","vertexAttribPointer","FLOAT","f","uniform1f","drawArrays","TRIANGLE_STRIP","window","requestAnimationFrame"],"mappings":"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"},"dependencies":["mod/$"]}